// js/game.js

import { Bike } from './bike.js';
import { controls } from './controls.js';
import { loadLevel, renderLevel } from './level.js';
import { loadAchievements, checkAchievements } from './achievements.js';

export class Game {
    constructor(canvas, ctx, supabase) {
        this.canvas = canvas;
        this.ctx = ctx;
        this.supabase = supabase;
        this.bike = null;
        this.gameState = {
            running: false,
            victory: false,
            time: 0
        };
        this.lastTime = 0;
        
        // Indlæs startniveau med det samme
        this.loadInitialLevel();
    }

    async loadInitialLevel() {
        // Standard level med en platform i bunden
        const defaultLevel = {
            platforms: [
                { x: 0, y: 600, width: 1280, height: 20 }
            ]
        };
        loadLevel(defaultLevel);
    }

    start() {
        // Opret spillerens cykel
        this.bike = new Bike(100, 300, 'cyan');
        this.gameState.running = true;
        this.lastTime = performance.now();
        
        // Start game loop
        requestAnimationFrame((t) => this.gameLoop(t));
    }

    gameLoop(timestamp) {
        // Beregn delta time
        const delta = timestamp - this.lastTime;
        this.lastTime = timestamp;

        // Opdater og render
        this.update(delta);
        this.render();

        // Fortsæt loop hvis spillet kører
        if (this.gameState.running) {
            requestAnimationFrame((t) => this.gameLoop(t));
        }
    }

    update(delta) {
        if (!this.gameState.running) return;

        // Opdater spilletid
        this.gameState.time += delta;

        // Opdater cykel med controls
        if (this.bike) {
            this.bike.update(delta, controls);

            // Sejrsbetingelse
            if (this.bike.x > 1200) {
                this.gameState.victory = true;
                this.gameState.running = false;
                checkAchievements({ victory: true });
                setTimeout(() => alert("Du vandt! Tid: " + (this.gameState.time / 1000).toFixed(2)), 500);
            }

            // Tab-betingelse
            if (!this.bike.isAlive) {
                this.gameState.running = false;
                setTimeout(() => alert("Game Over! Prøv igen."), 500);
            }
        }
    }

    render() {
        // Ryd canvas
        this.ctx.fillStyle = '#222';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Render level
        renderLevel(this.ctx);

        // Render cykel hvis den findes
        if (this.bike) {
            this.bike.render(this.ctx);
        }

        // Vis spilletid
        this.ctx.fillStyle = "#fff";
        this.ctx.font = "20px Arial";
        this.ctx.fillText("Tid: " + (this.gameState.time / 1000).toFixed(2), 40, 40);
    }
}
